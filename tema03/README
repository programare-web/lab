= Tema 03 - Generator de formulare =

**Responsabil:** Alex Ciminian

Scrieti un generator de formulare, folosind JavaScript. Pentru simplitate, consideram ca un formular poate contine oricare dintre urmatoarele elemente:
* **text input**,
* **combo-box**,
* **submit button**.

Tema va implementa design pattern-ul [[http://en.wikipedia.org/wiki/Abstract_factory|Abstract factory]]. In general, un **abstract factory** este o entitate care permite crearea de obiecte **factory**, care la randul sau sunt folosite pentru a crea alte obiecte //concrete//.

Pentru a primi punctajul complet pe temă se cer **două** implementări: una folosind doar funcțiile puse la dispoziție de DOM (se va realiza în ''js/form-factory.dom.js'') și una folosind doar jQuery (''js/form-factory.jquery.js''). Punctajul temei va fi împărțit în mod egal între cele două implementări (50p DOM și 50p jQuery).

== Abstract factory ==
În contextul temei, rolul unui **abstract factory** este jucat de urmatoarea funcție:

<code javascript>
function createFormFactory(config) { ... }
</code>

Aceasta functie primeste ca parametru un obiect care configurează un set de stiluri și o anumită structură și **întoarce un obiect factory**, capabil sa genereze formulare sau elemente de formular respectând configurarea specificată.

Configurarea poate avea doi membri.
* ''styles'' - setul de stiluri asociate elementelor create. Este pasat ca un obiect ce poate conține oricare dintre următorii membri:
  ** **form**, **input**, **select**, **submit**; fiecare conține una sau mai multe nume de **class**-uri CSS responsabile cu reprezentarea pentru: formular, input, dropdown și submit. Membrul styles este **obligatoriu**, el poate conține sau nu valori pentru fiecare din membri săi. În cazul în care unui membru îi vor fi adăugate mai mult de o clasă, acest lucru se face prin specificarea numelor într-un array (vedeți exemplul de mai jos).
* ''container'': o variantă pentru a formata corespunzator un formular este plasarea fiecărui element al acestuia **împreună cu descrierea sa** într-un element HTML (''div'', ''p'' etc). Numim un astfel de element **container**. Acest membru este **optional**. In cazul in care un container nu este specificat, elementele vor fi atasate **direct** formularului. Valoarea lui este pasată de asemenea ca un obiect, care va conține:
  ** ''type'': reține **tipul** container-ului folosit, si poate lua ca valori **nume de tag-uri** HTML (ex: ''**div**'', ''**p**'' etc.).
  ** ''class'': clasa/clasele CSS care se vor atașa containerelor (aceeași structură ca la clasele specificate în ''styles'').

Exemplu de obiect de configurare pentru ''createFormFactory''.
<code javascript>
/* consideram formClass, inputClass, selectClass, submitClass, formContainer, required si hilight 
 * ca fiind clase CSS disponibile in cadrul paginii curente
 */
var config = {
    styles : {
        form : 'formClass',
        input : {              
           text : ['inputClass', 'required'],
           submit : 'submitClass'          
        },
        select : 'selectClass'
    },
    container : {
        type : 'div',
        style : ['formContainer', 'hilight']
    }
}
</code>

== Factory objects ==

Functia **''createFormFactory''** intoarce un obiect **factory**, care permite crearea de:
* elemente de formular (''<input>'' text și submit, ''<select>'' - dropdown);
* formulare (''<form>'').

=== Metode implementate ===
Obiectul **factory** implementeaza urmatoarele metode:

<code javascript>
function createInput (config) {...} // intoarce un obiect de tip **text-input**

function createSelect (config) {...} // intoarce un obiect de tip **dropdown**

function createSubmit (config) {...} // intoarce un obiect de tip **submit button**

function createForm (config) {...} // intoarce un obiect de tip **formular**
</code>

=== Structura parametrilor ===

Parametrii trimiși metodelor descrise mai sus au o structură comună. Obiectele care descriu un element conțin următorii membri:
* **name**: se refera la numele elementului (atributul ''**name**''). **obligatoriu**;
* **id**: se refera la id-ul elementului (atributul ''**id**''). **obligatoriu**;
* **type**: se refera la tipul elementului, si poate avea urmatoarele valori: **''text''**, **''select''**, **''submit''**. **obligatoriu**;
* **value**: se refera la valoarea elementului (atributul ''**value**''); pentru elemente de tip **text** sau **submit** ea este de tip ''string'', pentru elemente de tip **dropdown**, ea este un ''array'' de ''string''-uri. **opțional**;
* **description**: se referă la descrierea elementului și reprezintă acel text care se afișează (de obicei) înaintea elementului, pentru a explica semnificația acestuia (exemple: //Nume complet//, //Adresă de email// etc.). **opțional**;
* **ajax**: conține un obiect care configureaza un comportament AJAX. **optional**.

Exemple:
<code javascript>
//exemplu de parametru pentru metoda createInput
var textInfo = {
    name : 'FirstName',
    id : 'FirstNameId',
    type : 'text',
    value : 'fill in',
    description : 'Your first Name:'
};

//exemplu de parametru pentru metoda createCombo
var dropdownInfo = {
    name : 'Gender',
    id : 'GenderId',
    type : 'combo',
    value : ['male', 'female'],
    description : 'Your gender:'
};

//exemplu de parametru pentru metoda createSubmit
var submitInfo = {
    name:'Submit',
    id:'SubmitId',
    type:'submit',
    value:'Send your data!'
};                 
</code>

Obiectul care descrie un formular are următorii membri:
* **name** : se referă la numele formularului (atributul ''name''). **obligatoriu**;
* **method** : se referă la metoda de trimitere a formularului, si poate avea urmatoarele valori: ''**GET**'', ''**POST**''. **obligatoriu**;
* **action**: se referă la URL-ul (scriptul) unde este trimis formularul. **obligatoriu**;
* **elements**: se referă la elementele din formular, si reprezinta un ''array'' de obiecte care le descriu (respectând structura descrisa mai sus).

Exemplu:
<code javascript>
   //exemplu de parametru pentru metoda createForm
   var formInfo = {
       name : 'formName',
       method : 'GET',
       action : 'script.php',
       elements : [ { 
           name : 'FirstName', 
           id : 'FirstNameId', 
           type : 'text', 
           value : 'fill in', 
           description:'Your first Name:'
       }, { 
           name : 'Gender', 
           id : 'GenderId', 
           type : 'combo', 
           value : ['male', 'female'], 
           description : 'Your gender:'
       }, { 
           name : 'Submit', 
           id : 'SubmitId', 
           type : 'submit', 
           value : 'send your data'
       }]
    };
</code>

=== AJAX ===

Anumite elemente din formular pot avea asociate evenimente care să trimită și primească informații de la un script, folosind AJAX. Pentru a specifica acest lucru, folosim un obiect atasat ca valoare a membrului **ajax** (mentionat anterior) dintr-un obiect ce descrie un element.

Membrii sai sunt:
* **url**: se referă la adresa scriptului către care sunt trimise informațiile;
* **event**: se referă la evenimentul care declanșează comportamentul dorit și poate primi ca valori tipuri de evenimente JavaScript (exemple: ''**change**'', ''**select**'', ''**click**'' etc.);
* **target**: se refera la **id**-ul obiectului care este modificat/populat cu informații;

Exemplu:
<code javascript>
//exemplu de obiect AJAXInfo
var ajaxConfig = {
    url : 'script.php', 
    event : 'change',
    target : 'TargetId'
};

var elementConfig = {
    name : ...,
    id : 'SourceId',
    type : ...
    ajax : ajaxConfig,
};
</code>

Cand un obiect este augmentat cu proprietăți specifice AJAX, comportamentul asteptat este urmatorul:
* Elementul va avea definita o functie pentru tratarea evenimentului specificat in membrul ''ajax'' (spre exemplu, **''change''**).
* Când evenimentul se produce:
  * **Valoarea** elementului este **trimisă** scriptului prin metoda **GET**. Spre exemplu, completarea elementului de tip ''<input>'' din exemplul de mai sus cu valoarea //''sample_text''// va declanșa următoarea cerere: ''**script.php?value=sample_text**''. Datele se vor transmite folosind parametrul **''value''**. Este obligatoriu să respectați această convenție.
  * Răspunsul primit de la server este prelucrat și atasat elementului cu id-ul specificat în ''target''. Răspunsul este codificat în format JSON. Distingem doua cazuri:
    * Elementul țintă este un ''<input>'' (text sau submit). În acest caz, valoarea întoarsă de script este atașată atributului ''**value**'' al țintei. Formatul răspunsului va fi:

<code javascript>
{
    "value" : "<valoare>"
}
</code>

    * Ținta este este un **dropdown**. În această situație datele primite de la server vor respecta următoarea structură:

<code javascript>
{
    "<key1>" : "<value1>",
    "<key2>" : "<value2>",
    ...
    "<keyn>" : "<valuen>"
}
</code> 

    * Dropdown-ul țintă trebuie **populat** cu perechile cheie-valoare astfel:
      * **cheia** reprezinta atributul ''**name**'' al opțiunii corespunzătoare
      * **valoarea** reprezinta informatia afisata utilizatorului (atributul ''**innerHTML**'' al obiectului corespunzator).

=== Exemplu de generare formular ===
Fie urmatorul scenariu de folosire a framework-ului:
<code javascript>
var config = {
    styles : {
        form : 'formClass',
        input : {              
           text : ['inputClass', 'required'],
           submit : 'submitClass'          
        },
        select : 'selectClass'
    },
    container : {
        type : 'div',
        style : ['formContainer', 'hilight']
    }
};
var factory = createFormFactory(config);
var formConfig = {
    name: 'formName',
    method: 'GET',
    action: 'script.php',
    elements: [{
        name : 'FirstName', 
        id : 'FirstNameId', 
        type : 'text', 
        value : 'fill in', 
        description : 'Your first name:'
    }, { 
        name : 'Gender', 
        id : 'GenderId', 
        type : 'select', 
        value : ['male', 'female'], 
        description : 'Your gender:'
    }, {
        name : 'Submit', 
        id : 'SubmitId', 
        type : 'submit', 
        value : 'send your data'
    }]
};
var form = creator.createForm(formInfo);        
</code>

Codul de mai sus ar trebui sa intoarca un formular cu urmatoarea structura:
<code html>
<form class='formClass' name='formName' method='GET' action='script.php'>
     <div class='formContainer hilight'>
           <label for="FirstNameId">Your first name:</label>
           <input class="inputClass required" name="FirstName" id="FirstNameId" type="text" value="Fill in" />
     </div>
     <div class='formContainer hilight'>
           <label for="GenderId">Your gender:</label>
           <select class='selectClass' name='Gender' id='GenderId'>
                <option name='male'>male</option>
                <option name='female'>female</option>
           </select>
     </div>
     <div class='formContainer hilight'>
           <input class='submitClass' name='Submit' id='SubmitId' type='submit' value='send your data' />
     </div>
</form>
</code>

=== Detalii de implementare ===

Descărcați {{:teme:tema3-generator-formulare.zip|}}.

Testerul se rulează în browser, printr-un request la fișierele ''test-dom.html'' sau ''test-jquery.html''.

Toate testele au aceleași pondere, iar un modul de test picat (din cele 7) înseamnă -10p (din cele 50 aferente unei implementări). Punctajul se va calcula separat pentru ele și nu se influențează reciproc (puteți avea 50p pentru jQuery și 0 pentru DOM). Verificarea respectării convențiilor de implementare se va face și manual (de ex. că nu ați folosit jQuery în implementarea de DOM sau că nu ați folosit metode direct din DOM atunci când aveați alternative cu jQuery).

Pentru denumirea arhivei citiți regulamentul cursului: [[ http://elf.cs.pub.ro/pw/wiki/regulament ]]

Arhiva se va uploada pe curs.cs. Nu trebuie să adaugați alte fișiere în afară de cele incluse inițial în arhivă. Orice alte fișiere în plus nu vor fi luate în considerare, iar în afară de cele două JavaScripturi (form-factory) și README nu trebuie modificat nici un alt fișier.

